package br.com.staroski.tools.analysis.ui;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CrosshairState;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import br.com.staroski.tools.analysis.analyzers.MetricsAnalyzer;

/**
 * A graphic user interface that allows to visualize {@link Project} metrics generated by the {@link MetricsAnalyzer}.
 *
 * @author Staroski, Ricardo Artur
 */
@SuppressWarnings("serial")
final class DispersionChartPanel extends JPanel implements I18N {

    private static class ComponentTableModel extends AbstractTableModel {

        private String[] columns = UI.getText("DispersionChartPanel.components.table.columns").split(",");

        private Class<?>[] columnTypes = { Integer.class, String.class, Double.class,
                Double.class, Double.class, Integer.class, Integer.class, Integer.class, Integer.class, Boolean.class };

        private final List<PlotData> datalist = new ArrayList<>();

        private JTable table;

        private ComponentTableModel() {}

        public void bind(JTable table) {
            this.table = table;
        }

        @Override
        public Class<?> getColumnClass(int col) {
            return columnTypes[col];
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public String getColumnName(int col) {
            return columns[col];
        }

        public PlotData getObjectAt(int row) {
            return datalist.get(row);
        }

        @Override
        public int getRowCount() {
            return datalist.size();
        }

        @Override
        public Object getValueAt(int row, int col) {
            if (!datalist.isEmpty() && row < datalist.size()) {
                PlotData data = getObjectAt(row);
                switch (col) {
                    case 0:
                        return table == null ? 0 : table.convertRowIndexToView(row) + 1;
                    case 1:
                        return data.name;
                    case 2:
                        return data.distance;
                    case 3:
                        return data.instability;
                    case 4:
                        return data.abstractness;
                    case 5:
                        return data.abstracts;
                    case 6:
                        return data.concretes;
                    case 7:
                        return data.outputs;
                    case 8:
                        return data.inputs;
                    case 9:
                        return data.acyclic;
                }
            }
            return null;
        }

        public void update(List<PlotData> newData) {
            datalist.clear();
            datalist.addAll(newData);
            fireTableDataChanged();
        }
    }

    private class CustomChartPanel extends ChartPanel {

        public CustomChartPanel(JFreeChart chart) {
            super(chart);
        }

        public void doSaveAs() {
            exportPng(getChart(), getWidth(), getHeight());
        }

        @Override
        protected JPopupMenu createPopupMenu(boolean properties, boolean copy, boolean save, boolean print, boolean zoom) {
            JPopupMenu menu = new JPopupMenu();

            saveAsPngItem = new JMenuItem(UI.getText("DispersionChartPanel.components.chart.exportPng"), new ImageIcon(Images.EXPORT_PNG_24));
            saveAsPngItem.addActionListener(event -> doSaveAs());
            menu.add(saveAsPngItem);

            return menu;
        }
    }

    private static final class ForcedListSelectionModel extends DefaultListSelectionModel {

        @Override
        public void setSelectionInterval(int index0, int index1) {
            super.setSelectionInterval(index0, index0);
        }
    }

    private static final class HeaderRenderer extends DefaultTableCellRenderer {

        private final int alignment;
        private final TableCellRenderer defaultHeaderRenderer;

        private HeaderRenderer(TableCellRenderer defaultHeaderRenderer, int alignment) {
            this.defaultHeaderRenderer = defaultHeaderRenderer;
            this.alignment = alignment;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
            Component component = defaultHeaderRenderer.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
            if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                label.setHorizontalAlignment(alignment);
            }
            return component;
        }
    }

    private static final class NumberCellRenderer extends DefaultTableCellRenderer {

        private NumberCellRenderer() {
            setHorizontalAlignment(SwingConstants.RIGHT);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
            if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
                value = DECIMAL_FORMAT.format(value);
            }
            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }

    private static class PlotData {

        final String name;
        final Double distance;
        final Double instability;
        final Double abstractness;
        final Integer outputs;
        final Integer inputs;
        final Integer concretes;
        final Integer abstracts;
        final Boolean acyclic;

        private PlotData(String name, double d, double i, double a, int na, int nc, int ce, int ca, boolean dag) {
            this.name = name;
            this.distance = d;
            this.instability = i;
            this.abstractness = a;
            this.abstracts = na;
            this.concretes = nc;
            this.outputs = ce;
            this.inputs = ca;
            this.acyclic = dag;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null || getClass() != obj.getClass())
                return false;
            PlotData that = (PlotData) obj;
            return Double.compare(this.instability, that.instability) == 0
                    && Double.compare(this.abstractness, that.abstractness) == 0;
        }

        @Override
        public int hashCode() {
            return Objects.hash(instability, abstractness);
        }

        public boolean inCoordinate(double x, double y) {
            return Double.compare(this.instability, x) == 0 && Double.compare(this.abstractness, y) == 0;
        }
    }

    private static class PlotDataRenderer extends XYShapeRenderer {

        private List<PlotData> selectedPlotData;

        public PlotDataRenderer(List<PlotData> selectedPlotData) {
            this.selectedPlotData = selectedPlotData;
        }

        @Override
        public void drawItem(Graphics2D g2, XYItemRendererState state, Rectangle2D dataArea, PlotRenderingInfo info,
                XYPlot plot, ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset, int series, int item,
                CrosshairState crosshairState, int pass) {

            // Store points in a list to draw them later
            List<PlotDataToDraw> allItemsToDraw = new ArrayList<>();

            // Iterate over all items in the dataset and store the points
            int seriesCount = dataset.getSeriesCount();
            for (int s = 0; s < seriesCount; s++) {
                int itemCount = dataset.getItemCount(s);
                for (int i = 0; i < itemCount; i++) {
                    double x = dataset.getXValue(s, i);
                    double y = dataset.getYValue(s, i);

                    // choose image for plot data
                    BufferedImage imageToDraw = Images.BALL_BLUE_12; // deselected are blue

                    if (selectedPlotData != null && !selectedPlotData.isEmpty()) {
                        for (PlotData selected : selectedPlotData) {
                            if (selected.inCoordinate(x, y)) {
                                imageToDraw = Images.BALL_RED_16; // selected are red
                            }
                        }
                    }

                    double transX = domainAxis.valueToJava2D(x, dataArea, plot.getDomainAxisEdge());
                    double transY = rangeAxis.valueToJava2D(y, dataArea, plot.getRangeAxisEdge());
                    allItemsToDraw.add(new PlotDataToDraw(transX, transY, imageToDraw, s, i));
                }
            }

            // Draw all points except the selected one
            for (PlotDataToDraw itemToDraw : allItemsToDraw) {
                drawImage(g2, state, dataset, itemToDraw);
            }
        }

        private void drawImage(Graphics2D g2, XYItemRendererState state, XYDataset dataset, PlotDataToDraw item) {
            int imageWidth = item.image.getWidth();
            int imageHeight = item.image.getHeight();
            g2.drawImage(item.image, (int) (item.transX - imageWidth / 2), (int) (item.transY - imageHeight / 2), null);

            EntityCollection entities = state.getEntityCollection();
            if (entities != null) {
                Rectangle hotspot = new Rectangle((int) item.transX - imageWidth / 2,
                        (int) item.transY - imageHeight / 2, imageWidth, imageHeight);
                addEntity(entities, hotspot, dataset, item.seriesIndex, item.itemIndex, item.transX, item.transY);
            }
        }
    }

    private static final class PlotDataToDraw {
        double transX;
        double transY;
        BufferedImage image;
        int seriesIndex;
        int itemIndex;

        PlotDataToDraw(double transX, double transY, BufferedImage image, int seriesIndex, int itemIndex) {
            this.transX = transX;
            this.transY = transY;
            this.image = image;
            this.seriesIndex = seriesIndex;
            this.itemIndex = itemIndex;
        }
    };

    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0.00");

    private JFreeChart chart;
    private XYPlot plot;
    private List<PlotData> allData;
    private int[] selectedIndexes = {};
    private JTable tableComponents;
    private JFreeChart componentDispersionChart;
    private XYTextAnnotation mainSequenceAnnotation;
    private XYTextAnnotation zoneOfPainAnnotation;
    private XYTextAnnotation zoneOfUselessnesAnnotation;
    private JPanel panelDisplayOptions;
    private JRadioButton radioButtonDisplayAll;
    private JRadioButton radioButtonDisplayAcyclic;
    private JRadioButton radioButtonDisplayCyclic;
    private JScrollPane scrollPaneComponents;
    private JScrollPane scrollPaneChart;
    private JPanel panelChartDisplayOptions;
    private JCheckBox checkboxColorfullBackground;
    private JMenuItem saveAsPngItem;
    private JMenuItem menuItemCopyColumnContent;
    private JMenuItem menuItemCopyTableContent;

    protected DispersionChartPanel() {
        super(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        chart = createChart();

        JSplitPane splitPane = createSplitPane();

        add(splitPane, BorderLayout.CENTER);
    }

    public String getCsvString() {
        final StringBuilder csvBuilder = new StringBuilder();

        final TableModel model = tableComponents.getModel();
        final int columnCount = model.getColumnCount();
        final int firstColumn = 1;
        final int lastColumn = columnCount - 1;
        // titles
        for (int col = firstColumn; col < columnCount; col++) {
            csvBuilder.append(model.getColumnName(col));
            if (col < lastColumn) {
                csvBuilder.append(",");
            }
        }
        // data
        for (int row = 0; row < model.getRowCount(); row++) {
            csvBuilder.append("\n");
            for (int col = firstColumn; col < columnCount; col++) {
                Object value = model.getValueAt(row, col);
                if (col == lastColumn) {
                    value = ((Boolean) value) ? 1 : 0;
                }
                csvBuilder.append(value);
                if (col < lastColumn) {
                    csvBuilder.append(",");
                }
            }
        }
        return csvBuilder.toString();
    }

    public boolean hasData() {
        return allData != null && !allData.isEmpty();
    }

    public void onLocaleChange(java.util.Locale newLocale) {
        if (panelDisplayOptions == null) {
            return;
        }
        panelDisplayOptions.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.display.titledBorder")));

        radioButtonDisplayAll.setText(UI.getText("DispersionChartPanel.components.display.all"));
        radioButtonDisplayAcyclic.setText(UI.getText("DispersionChartPanel.components.display.acyclic"));
        radioButtonDisplayCyclic.setText(UI.getText("DispersionChartPanel.components.display.cyclic"));

        scrollPaneComponents.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.table.titledBorder")));
        scrollPaneChart.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.chart.titledBorder")));

        panelChartDisplayOptions.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.chart.display.titledBorder")));
        checkboxColorfullBackground.setText(UI.getText("DispersionChartPanel.components.chart.display.colorfullBackground"));

        if (saveAsPngItem != null) {
            saveAsPngItem.setText(UI.getText("DispersionChartPanel.components.chart.exportPng"));
        }

        menuItemCopyColumnContent.setText(UI.getText("DispersionChartPanel.components.table.copyColumnContents"));
        menuItemCopyTableContent.setText(UI.getText("DispersionChartPanel.components.table.copyTableContents"));

        applyI18NTable();
        applyI18NChart();
    }

    public void setCsvFile(File file) {
        try {
            this.allData = readCsv(file);
            showAll();
        } catch (Exception e) {
            e.printStackTrace();
            UI.showError(this, "Error", e);
        }
    }

    public void setCsvString(String csv) {
        try {
            this.allData = readCsv(csv);
            showAll();
        } catch (Exception e) {
            e.printStackTrace();
            UI.showError(this, "Error", e);
        }
    }

    private void applyI18NChart() {
        if (componentDispersionChart == null) {
            return;
        }
        String title = UI.getText("DispersionChartPanel.components.chart.title");
        String axisX = UI.getText("DispersionChartPanel.components.chart.axisX");
        String axisY = UI.getText("DispersionChartPanel.components.chart.axisY");
        String mainSequence = UI.getText("DispersionChartPanel.components.chart.mainSequence");
        String zoneOfPain = UI.getText("DispersionChartPanel.components.chart.zoneOfPain");
        String zoneOfUselessness = UI.getText("DispersionChartPanel.components.chart.zoneOfUselessness");

        componentDispersionChart.setTitle(title);
        mainSequenceAnnotation.setText(mainSequence);
        zoneOfPainAnnotation.setText(zoneOfPain);
        zoneOfUselessnesAnnotation.setText(zoneOfUselessness);

        XYPlot plot = (XYPlot) componentDispersionChart.getPlot();
        plot.getDomainAxis().setLabel(axisX);
        plot.getRangeAxis().setLabel(axisY);

    }

    private void applyI18NTable() {
        if (tableComponents == null) {
            return;
        }
        final String[] columns = UI.getText("DispersionChartPanel.components.table.columns").split(",");
        final ComponentTableModel model = (ComponentTableModel) tableComponents.getModel();
        model.columns = columns;
        final TableColumnModel columnModel = tableComponents.getColumnModel();
        columnModel.getColumn(0).setHeaderValue(columns[0]);
        columnModel.getColumn(1).setHeaderValue(columns[1]);
        columnModel.getColumn(2).setHeaderValue(columns[2]);
        columnModel.getColumn(3).setHeaderValue(columns[3]);
        columnModel.getColumn(4).setHeaderValue(columns[4]);
        columnModel.getColumn(5).setHeaderValue(columns[5]);
        columnModel.getColumn(6).setHeaderValue(columns[6]);
        columnModel.getColumn(7).setHeaderValue(columns[7]);
        columnModel.getColumn(8).setHeaderValue(columns[8]);
        columnModel.getColumn(9).setHeaderValue(columns[9]);
    }

    private void copyColumnContentToClipboard() {
        final JTable table = tableComponents;
        int column = table.getSelectedColumn();

        if (column != -1) {
            StringBuilder csvBuilder = new StringBuilder();
            TableModel model = table.getModel();

            csvBuilder.append(model.getColumnName(column)).append("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                csvBuilder.append(model.getValueAt(i, column)).append("\n");
            }

            String csvText = csvBuilder.toString();
            StringSelection selection = new StringSelection(csvText);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
        }
    }

    private void copyTableContentToClipboard() {
        String csvText = getCsvString();
        StringSelection selection = new StringSelection(csvText);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }

    private JFreeChart createChart() {

        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries series = new XYSeries(UI.getText("DispersionChartPanel.components.table.titledBorder"));
        dataset.addSeries(series);

        String title = UI.getText("DispersionChartPanel.components.chart.title");
        String axisX = UI.getText("DispersionChartPanel.components.chart.axisX");
        String axisY = UI.getText("DispersionChartPanel.components.chart.axisY");
        componentDispersionChart = ChartFactory.createScatterPlot(title, axisX, axisY, dataset, PlotOrientation.VERTICAL, false, true, false);

        plot = (XYPlot) componentDispersionChart.getPlot();
        plot.setDomainPannable(false);
        plot.setRangePannable(false);
        plot.setForegroundAlpha(0.75f);

        plot.setBackgroundPaint(Color.WHITE);

        // Setup grid lines
        plot.setDomainGridlinesVisible(true);
        plot.setRangeGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.LIGHT_GRAY);
        plot.setRangeGridlinePaint(Color.LIGHT_GRAY);

        // Set the format and limits for X and Y axes
        double increment = 0.05;
        double minX = -0.04;
        double maxX = 1.04;
        double minY = -0.04;
        double maxY = 1.04;

        NumberAxis xAxis = (NumberAxis) plot.getDomainAxis();
        xAxis.setNumberFormatOverride(DECIMAL_FORMAT);
        xAxis.setRange(minX, maxX);
        xAxis.setTickUnit(new NumberTickUnit(increment));
        xAxis.setAxisLineVisible(true);
        xAxis.setAxisLinePaint(Color.BLACK);

        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setNumberFormatOverride(DECIMAL_FORMAT);
        yAxis.setRange(minY, maxY);
        yAxis.setTickUnit(new NumberTickUnit(increment));
        yAxis.setAxisLineVisible(true);
        yAxis.setAxisLinePaint(Color.BLACK);

        Stroke line = new BasicStroke(1.0f);
        Stroke dashes = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_ROUND, 10.0f,
                new float[] { 5.0f, 5.0f }, 0.0f);

        XYLineAnnotation xAxisTop = new XYLineAnnotation(0, 1, 1, 1, dashes, Color.BLACK);
        XYLineAnnotation xAxisCenter = new XYLineAnnotation(0, 0.5, 1, 0.5, dashes, Color.BLACK);
        XYLineAnnotation xAxisBottom = new XYLineAnnotation(0, 0, 1, 0, line, Color.BLACK);

        XYLineAnnotation yAxisLeft = new XYLineAnnotation(0, 0, 0, 1, line, Color.BLACK);
        XYLineAnnotation yAxisCenter = new XYLineAnnotation(0.5, 0, 0.5, 1, dashes, Color.BLACK);
        XYLineAnnotation yAxisRight = new XYLineAnnotation(1, 0, 1, 1, dashes, Color.BLACK);

        Font textFont = new Font("SansSerif", Font.PLAIN, 18);
        double textAngle = Math.toRadians(45.0);

        XYLineAnnotation mainSequence = new XYLineAnnotation(0, 1, 1, 0, line, Color.GREEN);
        mainSequenceAnnotation = new XYTextAnnotation(UI.getText("DispersionChartPanel.components.chart.mainSequence"), 0.5, 0.5);
        mainSequenceAnnotation.setRotationAngle(textAngle);
        mainSequenceAnnotation.setFont(textFont);

        double x = -0.5;
        double y = -0.5;
        double w = 1.0;
        double h = 1.0;
        double start = 0.0;
        double extent = -90;
        XYShapeAnnotation zoneOfPain = new XYShapeAnnotation(new Arc2D.Double(x, y, w, h, start, extent, Arc2D.OPEN), line, Color.RED);
        zoneOfPainAnnotation = new XYTextAnnotation(UI.getText("DispersionChartPanel.components.chart.zoneOfPain"), 0.2, 0.2);
        zoneOfPainAnnotation.setRotationAngle(textAngle);
        zoneOfPainAnnotation.setFont(textFont);

        x = 0.5;
        y = 0.5;
        w = 1.0;
        h = 1.0;
        start = 180.0;
        extent = -90;
        XYShapeAnnotation zoneOfUselessnes = new XYShapeAnnotation(new Arc2D.Double(x, y, w, h, start, extent, Arc2D.OPEN), line, Color.ORANGE);
        zoneOfUselessnesAnnotation = new XYTextAnnotation(UI.getText("DispersionChartPanel.components.chart.zoneOfUselessness"), 0.8, 0.8);
        zoneOfUselessnesAnnotation.setRotationAngle(textAngle);
        zoneOfUselessnesAnnotation.setFont(textFont);

        plot.addAnnotation(xAxisTop);
        plot.addAnnotation(xAxisCenter);
        plot.addAnnotation(xAxisBottom);

        plot.addAnnotation(yAxisLeft);
        plot.addAnnotation(yAxisCenter);
        plot.addAnnotation(yAxisRight);

        plot.addAnnotation(mainSequence);
        plot.addAnnotation(mainSequenceAnnotation);

        plot.addAnnotation(zoneOfPain);
        plot.addAnnotation(zoneOfPainAnnotation);

        plot.addAnnotation(zoneOfUselessnes);
        plot.addAnnotation(zoneOfUselessnesAnnotation);

        // Set the renderer for the points
        plot.setRenderer(0, createDotRenderer());

        return componentDispersionChart;
    }

    private XYSeriesCollection createDataset(boolean all, boolean acyclic, boolean cyclic) {
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSeries series = new XYSeries("Components");

        List<PlotData> visibleData = new ArrayList<>();
        if (allData != null) {
            for (PlotData data : allData) {
                if (all) {
                    series.add(data.instability, data.abstractness);
                    visibleData.add(data);
                } else if (acyclic && data.acyclic) {
                    series.add(data.instability, data.abstractness);
                    visibleData.add(data);
                } else if (cyclic && !data.acyclic) {
                    series.add(data.instability, data.abstractness);
                    visibleData.add(data);
                }
            }
        }

        dataset.addSeries(series);

        if (tableComponents != null) {
            ComponentTableModel tableModel = (ComponentTableModel) tableComponents.getModel();
            tableModel.update(visibleData);
            tableComponents.clearSelection();
            plot.setRenderer(0, createDotRenderer(null)); // Update the renderer for the series of points
        }

        return dataset;
    }

    private XYShapeRenderer createDotRenderer() {
        return createDotRenderer(null);
    }

    private XYShapeRenderer createDotRenderer(final List<PlotData> selectedPlotData) {
        return new PlotDataRenderer(selectedPlotData);
    }

    private JSplitPane createSplitPane() {
        JPanel leftPanel = createSplitPaneLeft();
        JPanel rightPanel = createSplitPaneRight();
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, rightPanel);
        SwingUtilities.invokeLater(() -> splitPane.setDividerLocation(0.45));
        return splitPane;
    }

    private JPanel createSplitPaneLeft() {
        JPanel topPanel = createSplitPaneLeftTop();

        tableComponents = createTable();
        scrollPaneComponents = new JScrollPane(tableComponents, //
                ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, //
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPaneComponents.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.table.titledBorder")));

        JPanel leftPanel = new JPanel(new BorderLayout(5, 5));
        leftPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        leftPanel.add(topPanel, BorderLayout.NORTH);
        leftPanel.add(scrollPaneComponents, BorderLayout.CENTER);
        return leftPanel;
    }

    private JPanel createSplitPaneLeftTop() {
        panelDisplayOptions = new JPanel();
        panelDisplayOptions.setLayout(new FlowLayout(FlowLayout.LEADING));
        panelDisplayOptions.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.display.titledBorder")));

        radioButtonDisplayAll = new JRadioButton(UI.getText("DispersionChartPanel.components.display.all"), true);
        radioButtonDisplayAcyclic = new JRadioButton(UI.getText("DispersionChartPanel.components.display.acyclic"));
        radioButtonDisplayCyclic = new JRadioButton(UI.getText("DispersionChartPanel.components.display.cyclic"));

        radioButtonDisplayAll.addActionListener(e -> showAll());
        radioButtonDisplayAcyclic.addActionListener(e -> showAcyclic(true));
        radioButtonDisplayCyclic.addActionListener(e -> showAcyclic(false));

        ButtonGroup group = new ButtonGroup();
        group.add(radioButtonDisplayAll);
        group.add(radioButtonDisplayAcyclic);
        group.add(radioButtonDisplayCyclic);

        panelDisplayOptions.add(radioButtonDisplayAll);
        panelDisplayOptions.add(radioButtonDisplayAcyclic);
        panelDisplayOptions.add(radioButtonDisplayCyclic);

        return panelDisplayOptions;
    }

    private JPanel createSplitPaneRight() {
        JPanel topPanel = createSplitPaneRightTop();

        ChartPanel chartPanel = new CustomChartPanel(chart);

        JPanel rightPanel = new JPanel(new BorderLayout(5, 5));
        rightPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        scrollPaneChart = new JScrollPane(chartPanel, //
                ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, //
                ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        scrollPaneChart.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.chart.titledBorder")));

        rightPanel.add(topPanel, BorderLayout.NORTH);
        rightPanel.add(scrollPaneChart, BorderLayout.CENTER);

        return rightPanel;
    }

    private JPanel createSplitPaneRightTop() {
        checkboxColorfullBackground = new JCheckBox(UI.getText("DispersionChartPanel.components.chart.display.colorfullBackground"));
        checkboxColorfullBackground.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JCheckBox checkBox = (JCheckBox) e.getSource();
                Image background = checkBox.isSelected() ? Images.SCATTERPLOT_BACKGROUND_1920 : null;
                plot.setBackgroundImage(background);
            }
        });

        panelChartDisplayOptions = new JPanel(new FlowLayout(FlowLayout.LEADING));
        panelChartDisplayOptions.setBorder(BorderFactory.createTitledBorder(UI.getText("DispersionChartPanel.components.chart.display.titledBorder")));

        panelChartDisplayOptions.add(checkboxColorfullBackground);
        return panelChartDisplayOptions;
    }

    private JTable createTable() {
        ComponentTableModel tableModel = new ComponentTableModel();
        final JTable table = new JTable(tableModel);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tableModel);
        sorter.setSortable(0, false);
        table.setRowSorter(sorter);

        tableModel.bind(table);

        TableCellRenderer defaultHeaderRenderer = table.getTableHeader().getDefaultRenderer();

        TableCellRenderer headersRenderer = new HeaderRenderer(defaultHeaderRenderer, SwingConstants.CENTER);
        TableCellRenderer column1Renderer = new HeaderRenderer(defaultHeaderRenderer, SwingConstants.RIGHT);
        TableCellRenderer numericRenderer = new NumberCellRenderer();

        table.getTableHeader().setDefaultRenderer(headersRenderer);

        TableColumnModel columnModel = table.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(33);
        columnModel.getColumn(1).setPreferredWidth(210);
        columnModel.getColumn(2).setPreferredWidth(40);
        columnModel.getColumn(3).setPreferredWidth(40);
        columnModel.getColumn(4).setPreferredWidth(40);
        columnModel.getColumn(5).setPreferredWidth(40);
        columnModel.getColumn(6).setPreferredWidth(40);
        columnModel.getColumn(7).setPreferredWidth(40);
        columnModel.getColumn(8).setPreferredWidth(40);
        columnModel.getColumn(9).setPreferredWidth(40);

        columnModel.getColumn(0).setCellRenderer(column1Renderer);
        columnModel.getColumn(2).setCellRenderer(numericRenderer);
        columnModel.getColumn(3).setCellRenderer(numericRenderer);
        columnModel.getColumn(4).setCellRenderer(numericRenderer);

        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        ListSelectionModel selectionModel = new ForcedListSelectionModel();
        table.setSelectionModel(selectionModel);

        createTableHeaderPopupMenu(table);
        createTableCellPopupMenu(table);

        // Add a listener to highlight the selected point
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                ComponentTableModel tableModel = (ComponentTableModel) table.getModel();

                List<PlotData> newPlotData = new ArrayList<>();

                int[] selectedRows = table.getSelectedRows();
                selectedIndexes = new int[selectedRows.length];

                for (int i = 0; i < selectedRows.length; i++) {
                    int selection = selectedRows[i];
                    int modelIndex = table.convertRowIndexToModel(selection == -1 ? e.getFirstIndex() : selection);
                    selectedIndexes[i] = modelIndex;

                    PlotData plotData = modelIndex < 0 ? null : tableModel.getObjectAt(modelIndex);
                    newPlotData.add(plotData);
                }
                plot.setRenderer(0, createDotRenderer(newPlotData)); // Update the renderer for the series of points
            }
        });

        // Add a KeyListener to detect the ESC key
        table.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    table.clearSelection(); // Clear the selection on ESC press
                    plot.setRenderer(0, createDotRenderer(null)); // Update the renderer for the series of points
                }
            }
        });
        return table;
    }

    private void createTableCellPopupMenu(JTable table) {
        menuItemCopyTableContent = new JMenuItem(UI.getText("DispersionChartPanel.components.table.copyTableContents"), new ImageIcon(Images.COPY_24));
        menuItemCopyTableContent.addActionListener(e -> copyTableContentToClipboard());

        JPopupMenu cellPopupMenu = new JPopupMenu();
        cellPopupMenu.add(menuItemCopyTableContent);

        table.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showCellPopup(e);
                }
            }

            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showCellPopup(e);
                }
            }

            private void showCellPopup(MouseEvent e) {
                int row = table.rowAtPoint(e.getPoint());
                int column = table.columnAtPoint(e.getPoint());
                if (column > 0) {
                    if (!table.isRowSelected(row))
                        table.changeSelection(row, column, false, false);

                    cellPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

    }

    private void createTableHeaderPopupMenu(JTable table) {
        menuItemCopyColumnContent = new JMenuItem(UI.getText("DispersionChartPanel.components.table.copyColumnContents"), new ImageIcon(Images.COPY_24));
        menuItemCopyColumnContent.addActionListener(e -> copyColumnContentToClipboard());

        JPopupMenu headerPopupMenu = new JPopupMenu();
        headerPopupMenu.add(menuItemCopyColumnContent);

        table.getTableHeader().addMouseListener(new MouseAdapter() {

            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showHeaderPopup(e);
                }
            }

            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showHeaderPopup(e);
                }
            }

            private void showHeaderPopup(MouseEvent e) {
                JTableHeader header = (JTableHeader) e.getSource();
                TableColumnModel columnModel = header.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = header.getTable().convertColumnIndexToModel(viewColumn);
                if (column > 0) {
                    header.getTable().setColumnSelectionInterval(column, column);
                    headerPopupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

    }

    private void exportPng(JFreeChart chart, int width, int height) {
        String description = UI.getText("DispersionChartPanel.components.chart.exportPng.description");
        String extension = UI.getText("DispersionChartPanel.components.chart.exportPng.type");
        final File fileToSave = UI.saveFile(this, description, extension);
        if (fileToSave == null) {
            return;
        }
        boolean canSave = true;
        if (fileToSave.exists()) {
            String title = UI.getText("DispersionChartPanel.components.chart.exportPng.existing.title");
            String message = UI.getText("DispersionChartPanel.components.chart.exportPng.existing.message", fileToSave.getName());
            canSave = UI.showConfirmation(this, title, message);
        }
        if (canSave) {
            try {
                ChartUtilities.saveChartAsPNG(fileToSave, chart, width, height);

                String title = UI.getText("DispersionChartPanel.components.chart.exportPng.success.title");
                String message = UI.getText("DispersionChartPanel.components.chart.exportPng.success.message");
                UI.showInformation(this, title, message);
            } catch (IOException e) {
                e.printStackTrace();
                String title = UI.getText("DispersionChartPanel.components.chart.exportPng.error.title");
                UI.showError(this, title, e);
            }
        }
    }

    private List<PlotData> readCsv(File csv) throws Exception {
        Reader in = new FileReader(csv);
        List<PlotData> allData = readCsvData(in);
        in.close();
        return allData;
    }

    private List<PlotData> readCsv(String csvContent) throws Exception {
        Reader in = new StringReader(csvContent);
        List<PlotData> allData = readCsvData(in);
        in.close();
        return allData;
    }

    private List<PlotData> readCsvData(Reader in) throws Exception {
        List<PlotData> allData = new ArrayList<>();
        NumberFormat format = NumberFormat.getInstance(UI.UNITED_STATES);
        BufferedReader br = new BufferedReader(in);
        String line = br.readLine(); // Name,D,I,A,Na,Nc,Ce,Ca,DAG
        while ((line = br.readLine()) != null) { // data
            String[] values = line.split(",");
            int col = 0;
            String name = values[col++].trim();

            double d = format.parse(values[col++].trim()).doubleValue();
            double i = format.parse(values[col++].trim()).doubleValue();
            double a = format.parse(values[col++].trim()).doubleValue();
            int na = format.parse(values[col++].trim()).intValue();
            int nc = format.parse(values[col++].trim()).intValue();
            int ce = format.parse(values[col++].trim()).intValue();
            int ca = format.parse(values[col++].trim()).intValue();
            boolean dag = format.parse(values[col++].trim()).intValue() > 0;
            PlotData data = new PlotData(name, d, i, a, na, nc, ce, ca, dag);
            allData.add(data);
        }
        return allData;
    }

    private void showAcyclic(boolean acyclic) {
        plot.setDataset(createDataset(false, acyclic, !acyclic));
    }

    private void showAll() {
        plot.setDataset(createDataset(true, false, false));
    }
}
